const db = require('./ultra_database');

console.log('‚ïê'.repeat(100));
console.log('ULTRA AGRESƒ∞F VERƒ∞TABANI TARAMASI');
console.log('HER ƒ∞NGƒ∞Lƒ∞ZCE KELƒ∞ME, HER BOZUK √áEVƒ∞Rƒ∞, HER KARMA C√úMLE');
console.log('‚ïê'.repeat(100) + '\n');

const issues = [];
let totalChecked = 0;

// KAPSAMLI ƒ∞ngilizce kelime listesi
const englishWords = [
  // Temel kelimeler
  'the', 'and', 'with', 'when', 'from', 'into', 'this', 'that', 'ball', 'player',
  'make', 'very', 'can', 'will', 'about', 'half', 'success', 'rate', 'constant',
  'mirror', 'approach', 'struggle', 'lack', 'force', 'create', 'exploit',

  // Futbol eylemleri (-ing formlarƒ± DAHƒ∞L)
  'crossing', 'spacing', 'timing', 'pressing', 'building', 'marking', 'tracking',
  'switching', 'overlapping', 'creating', 'finishing', 'running', 'passing',
  'defending', 'attacking', 'blocking', 'covering', 'supporting', 'positioning',
  'rotating', 'dropping', 'pushing', 'pulling', 'holding', 'winning', 'losing',
  'creating', 'exploiting', 'forcing', 'struggling', 'lacking', 'making',

  // Sƒ±fatlar
  'quick', 'slow', 'wide', 'narrow', 'deep', 'high', 'low', 'central', 'lateral',
  'vertical', 'diagonal', 'horizontal', 'aggressive', 'passive', 'active',
  'reactive', 'compact', 'stretched', 'fluid', 'rigid', 'flexible', 'direct',
  'indirect', 'simple', 'complex', 'strong', 'weak', 'fast', 'slow',

  // Futbol terimleri (T√ºrk√ßeye √ßevrilmeli)
  'overload', 'counter', 'target', 'build-up', 'buildup', 'press', 'block',
  'line', 'zone', 'area', 'space', 'channel', 'flank', 'wing', 'box',
  'third', 'middle', 'back', 'front', 'behind', 'ahead', 'around', 'between',

  // Diƒüer yaygƒ±n kelimeler
  'against', 'through', 'over', 'under', 'before', 'after', 'during', 'while',
  'until', 'since', 'because', 'if', 'then', 'than', 'more', 'less', 'most',
  'least', 'some', 'any', 'all', 'both', 'either', 'neither', 'each', 'every',
  'other', 'another', 'such', 'own', 'same', 'different', 'new', 'old', 'good',
  'bad', 'better', 'worse', 'best', 'worst', 'much', 'many', 'few', 'little',
  'long', 'short', 'near', 'far', 'early', 'late', 'hard', 'easy', 'right',
  'wrong', 'left', 'full', 'empty', 'clean', 'dirty', 'safe', 'dangerous'
];

// GE√áERLƒ∞ futbol terimleri ve √∂zel isimler (bunlar ƒ∞ngilizce kalabilir)
const validTerms = [
  'Gegenpressing', 'Possession', 'Wing-Back', 'wing-back', 'Inverted', 'False',
  'Defensive', 'Balanced', 'Compact', 'Diamond', 'Bus', 'False 9', 'Tiki-taka',
  'Guardiola', 'Klopp', 'Mourinho', 'Conte', 'Ancelotti', 'Tuchel', 'Arteta',
  'Ten Hag', 'Simeone', 'Gasperini', 'Ranieri', 'Zidane', 'Inzaghi', 'Flick',
  'Sacchi', 'Cruyff', 'Van Gaal', 'Bielsa', 'Rangnick', 'Nagelsmann', 'Chapman',
  'Pochettino', 'Zeman', 'L√∂w', 'Valverde', 'Bosz', 'Mancini', 'Emery',
  'Spalletti', 'Xavi', 'Luis Enrique', 'Heynckes', 'Allegri', 'Sarri',
  'Deschamps', 'Scaloni', 'Slot', 'Iraola', 'Postecoglou', 'De Zerbi',
  'Xabi Alonso', 'Kompany', 'Barcelona', 'Manchester City', 'Real Madrid',
  'Bayern', 'Liverpool', 'Chelsea', 'Arsenal', 'Tottenham', 'Inter', 'Milan',
  'Juventus', 'Napoli', 'Ajax', 'RB Leipzig', 'Atletico', 'Christmas Tree',
  'WM Formation', 'Piramit'
];

// BOZUK KELƒ∞MELER
const brokenWords = [
  'eting', 'zorlans', 'zorlad', 'agresifly', 'zamany', 'inir', 'alal√ßak',
  'mirrorir', 'gegenbaskƒ±', 'kanaters', 'versiy√∂n√º', 'organizasy√∂n√º',
  'pozisy√∂n√º', 'kombinasy√∂n√º', '√ºzerindenload', 'load√ºzerinden'
];

// T√ºm tablolarƒ± ve alanlarƒ±nƒ± tara
db.all("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'", [], (err, tables) => {
  if (err) {
    console.log('HATA:', err);
    process.exit(1);
  }

  console.log(`üìã ${tables.length} tablo taranacak\n`);

  let tableIndex = 0;

  function checkNextTable() {
    if (tableIndex >= tables.length) {
      showResults();
      return;
    }

    const tableName = tables[tableIndex].name;
    console.log(`[${tableIndex + 1}/${tables.length}] ${tableName} taranƒ±yor...`);

    db.all(`PRAGMA table_info(${tableName})`, [], (err2, columns) => {
      if (err2) {
        tableIndex++;
        checkNextTable();
        return;
      }

      const textColumns = columns.filter(c =>
        c.type.toLowerCase().includes('text') ||
        c.type.toLowerCase().includes('varchar') ||
        c.type === ''
      );

      if (textColumns.length === 0) {
        tableIndex++;
        checkNextTable();
        return;
      }

      db.all(`SELECT * FROM ${tableName}`, [], (err3, rows) => {
        if (err3) {
          tableIndex++;
          checkNextTable();
          return;
        }

        rows.forEach((row, idx) => {
          textColumns.forEach(col => {
            const value = row[col.name];
            if (value && typeof value === 'string') {
              totalChecked++;
              const problems = aggressiveCheck(value);

              if (problems.length > 0) {
                issues.push({
                  table: tableName,
                  id: row.id || idx,
                  column: col.name,
                  problems: problems,
                  sample: value.substring(0, 120)
                });
              }
            }
          });
        });

        tableIndex++;
        setTimeout(checkNextTable, 5);
      });
    });
  }

  checkNextTable();
});

function aggressiveCheck(text) {
  const problems = [];
  const lowerText = text.toLowerCase();

  // Ge√ßerli terim mi?
  let isValidContext = false;
  validTerms.forEach(term => {
    if (text.includes(term)) isValidContext = true;
  });

  // 1. Bozuk kelimeleri kontrol et
  brokenWords.forEach(broken => {
    if (lowerText.includes(broken)) {
      problems.push(`BOZUK: "${broken}"`);
    }
  });

  // 2. ƒ∞ngilizce kelimeleri kontrol et (kelime sƒ±nƒ±rlarƒ±yla)
  englishWords.forEach(word => {
    const regex = new RegExp(`\\b${word}\\b`, 'i');
    if (regex.test(lowerText)) {
      // Ge√ßerli terim i√ßinde mi kontrol et
      if (!isValidContext) {
        problems.push(`ƒ∞NG: "${word}"`);
      } else {
        // Ge√ßerli terimin tam i√ßinde mi yoksa yanƒ±nda mƒ±?
        let inValidTerm = false;
        validTerms.forEach(term => {
          const termIndex = lowerText.indexOf(term.toLowerCase());
          const wordIndex = lowerText.indexOf(word.toLowerCase());
          if (termIndex >= 0 && wordIndex >= termIndex && wordIndex < termIndex + term.length) {
            inValidTerm = true;
          }
        });
        if (!inValidTerm) {
          problems.push(`ƒ∞NG: "${word}"`);
        }
      }
    }
  });

  // 3. Uzun ƒ∞ngilizce c√ºmle kalƒ±plarƒ±
  if (text.match(/\b[a-z]+\s+[a-z]+\s+[a-z]+\s+[a-z]+\s+[a-z]+/i) && !isValidContext) {
    const englishCount = englishWords.filter(w => new RegExp(`\\b${w}\\b`, 'i').test(lowerText)).length;
    if (englishCount >= 3) {
      problems.push('KARMA C√úMLE (3+ ƒ∞ngilizce kelime)');
    }
  }

  return [...new Set(problems)];
}

function showResults() {
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('ULTRA AGRESƒ∞F TARAMA TAMAMLANDI!');
  console.log('‚ïê'.repeat(100) + '\n');

  console.log(`üìä ƒ∞STATƒ∞STƒ∞KLER:`);
  console.log(`   Kontrol edilen alan: ${totalChecked}`);
  console.log(`   Sorunlu alan: ${issues.length}`);
  console.log(`   Temiz alan: ${totalChecked - issues.length}`);
  console.log(`   Ba≈üarƒ± oranƒ±: ${((totalChecked - issues.length) / totalChecked * 100).toFixed(2)}%\n`);

  if (issues.length === 0) {
    console.log('‚úÖ‚úÖ‚úÖ M√úKEMMEL! Hƒ∞√áBƒ∞R SORUN YOK! ‚úÖ‚úÖ‚úÖ\n');
  } else {
    console.log(`‚ùå ${issues.length} SORUNLU ALAN BULUNDU\n`);

    // Tabloya g√∂re grupla
    const byTable = {};
    issues.forEach(issue => {
      if (!byTable[issue.table]) byTable[issue.table] = [];
      byTable[issue.table].push(issue);
    });

    console.log('TABLO BAZINDA DAƒûILIM:\n');
    Object.keys(byTable).sort((a, b) => byTable[b].length - byTable[a].length).forEach(table => {
      console.log(`üìã ${table}: ${byTable[table].length} sorun`);
    });

    console.log('\n\nƒ∞LK 50 SORUN DETAYLI:\n');
    issues.slice(0, 50).forEach((issue, idx) => {
      console.log(`${idx + 1}. [${issue.table} #${issue.id}] ${issue.column}`);
      console.log(`   Sorunlar: ${issue.problems.join(', ')}`);
      console.log(`   √ñrnek: "${issue.sample}..."`);
      console.log();
    });

    if (issues.length > 50) {
      console.log(`\n... ve ${issues.length - 50} sorun daha\n`);
    }
  }

  console.log('‚ïê'.repeat(100) + '\n');
  process.exit(0);
}
