const db = require('./ultra_database');

console.log('‚ïê'.repeat(100));
console.log('MUTLAK KAPSAMLI VERƒ∞TABANI KONTROL√ú');
console.log('HER TABLO, HER ALAN, HER KAYIT TEK TEK KONTROL EDƒ∞Lƒ∞YOR');
console.log('‚ïê'.repeat(100) + '\n');

const issues = [];
let totalFields = 0;
let checkedFields = 0;

// T√ºm tablolarƒ± al
db.all("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' ORDER BY name", [], (err, tables) => {
  if (err) {
    console.log('HATA:', err);
    process.exit(1);
  }

  console.log(`üìã Bulunan Tablolar: ${tables.length}\n`);
  tables.forEach(t => console.log(`   ‚Ä¢ ${t.name}`));
  console.log('\n' + '‚ïê'.repeat(100) + '\n');

  let tableIndex = 0;

  function checkNextTable() {
    if (tableIndex >= tables.length) {
      finishCheck();
      return;
    }

    const tableName = tables[tableIndex].name;
    console.log(`\n[${tableIndex + 1}/${tables.length}] ${tableName.toUpperCase()} TABLOSU KONTROL EDƒ∞Lƒ∞YOR...\n`);

    // Tablo yapƒ±sƒ±nƒ± al
    db.all(`PRAGMA table_info(${tableName})`, [], (err2, columns) => {
      if (err2) {
        console.log(`   HATA: ${err2.message}`);
        tableIndex++;
        checkNextTable();
        return;
      }

      // Text tipindeki kolonlarƒ± bul
      const textColumns = columns.filter(c =>
        c.type.toLowerCase().includes('text') ||
        c.type.toLowerCase().includes('varchar') ||
        c.type === ''
      );

      console.log(`   Kolonlar: ${columns.length} toplam, ${textColumns.length} text kolonu`);
      textColumns.forEach(c => console.log(`      ‚Ä¢ ${c.name} (${c.type || 'TEXT'})`));

      if (textColumns.length === 0) {
        console.log(`   ‚è≠Ô∏è  Kontrol edilecek text kolonu yok, atlƒ±yorum.`);
        tableIndex++;
        checkNextTable();
        return;
      }

      // T√ºm kayƒ±tlarƒ± al
      db.all(`SELECT * FROM ${tableName}`, [], (err3, rows) => {
        if (err3) {
          console.log(`   HATA: ${err3.message}`);
          tableIndex++;
          checkNextTable();
          return;
        }

        console.log(`   Kayƒ±tlar: ${rows.length}\n`);

        let problemCount = 0;

        rows.forEach((row, idx) => {
          textColumns.forEach(col => {
            const value = row[col.name];
            if (value && typeof value === 'string') {
              totalFields++;
              checkedFields++;

              // Kontroller
              const problems = checkText(value, tableName, row.id || idx, col.name);
              if (problems.length > 0) {
                problemCount++;
                issues.push({
                  table: tableName,
                  id: row.id || idx,
                  column: col.name,
                  problems: problems,
                  sample: value.substring(0, 100)
                });

                if (problemCount <= 10) { // ƒ∞lk 10 sorunu g√∂ster
                  console.log(`   ‚ùå [${tableName} #${row.id || idx}] ${col.name}:`);
                  console.log(`      Sorunlar: ${problems.join(', ')}`);
                  console.log(`      √ñrnek: "${value.substring(0, 80)}..."\n`);
                }
              }
            }
          });
        });

        if (problemCount === 0) {
          console.log(`   ‚úÖ ${rows.length} kayƒ±t temiz!`);
        } else {
          console.log(`   ‚ùå ${problemCount} kayƒ±tta sorun bulundu!`);
          if (problemCount > 10) {
            console.log(`      (Sadece ilk 10 sorun g√∂sterildi, ${problemCount - 10} sorun daha var)`);
          }
        }

        tableIndex++;
        setTimeout(checkNextTable, 10);
      });
    });
  }

  checkNextTable();
});

function checkText(text, table, id, column) {
  const problems = [];

  // Ge√ßerli futbol terimleri ve √∂zel isimler
  const validTerms = [
    'Gegenpressing', 'Possession', 'Wing-Back', 'wing-back', 'Inverted',
    'Defensive', 'Balanced', 'Compact', 'Diamond', 'Bus', 'False 9',
    'Guardiola', 'Klopp', 'Mourinho', 'Conte', 'Ancelotti', 'Tuchel',
    'Arteta', 'Ten Hag', 'Simeone', 'Gasperini', 'Ranieri', 'Zidane',
    'Inzaghi', 'Flick', 'Sacchi', 'Cruyff', 'Van Gaal', 'Bielsa',
    'Rangnick', 'Nagelsmann', 'Chapman', 'Pochettino', 'Zeman', 'L√∂w',
    'Barcelona', 'Manchester City', 'Real Madrid', 'Bayern', 'Liverpool',
    'Christmas Tree', 'False', 'WM Formation', 'Piramit'
  ];

  // Bu terimlerin i√ßinde ge√ßmesine izin ver
  let isValidContext = false;
  validTerms.forEach(term => {
    if (text.includes(term)) isValidContext = true;
  });

  // Basit ƒ∞ngilizce kelimeler (futbol terimleri hari√ß)
  const commonEnglish = [
    'the', 'and', 'with', 'when', 'from', 'into', 'this', 'that',
    'ball', 'player', 'make', 'very', 'can', 'will', 'about',
    'half', 'success', 'rate', 'constant', 'mirror'
  ];

  const lowerText = text.toLowerCase();

  // ƒ∞ngilizce kelime kontrol√º
  commonEnglish.forEach(word => {
    const regex = new RegExp(`\\b${word}\\b`, 'i');
    if (regex.test(lowerText) && !isValidContext) {
      // √ñzel durumlar i√ßin ekstra kontrol
      if (word === 'half' && text.includes('halfway')) return; // "halfway line" futbol terimi
      problems.push(`ƒ∞ngilizce: "${word}"`);
    }
  });

  // Bozuk √ßeviriler
  const brokenWords = [
    'eting', 'zorlans', 'zorlad', 'agresifly', 'zamany',
    'alal√ßak', 'mirrorir', 'gegenbaskƒ±', 'kanaters',
    'versiy√∂n√º', 'organizasy√∂n√º'
  ];

  brokenWords.forEach(broken => {
    if (lowerText.includes(broken)) {
      problems.push(`Bozuk kelime: "${broken}"`);
    }
  });

  // "tops" kelimesini kontrol et AMA "Topsuz", "topsuz", "topla", "topa", "top " gibi ge√ßerli T√ºrk√ße kelimeleri hari√ß tut
  if (lowerText.includes('tops') &&
      !text.includes('Topsuz') && !text.includes('topsuz') &&
      !text.includes('topla') && !text.includes('topa') &&
      !text.includes('TOPA') && !text.includes('top ')) {
    problems.push(`Bozuk kelime: "tops"`);
  }

  // Eksik T√ºrk√ße karakterler (ama kelime tam olarak e≈üle≈ümeli)
  const wrongChars = [
    { wrong: 'karsi', correct: 'kar≈üƒ±' },
    { wrong: 'ozellikle', correct: '√∂zellikle' },
    { wrong: 'baski', correct: 'baskƒ±' },
    { wrong: 'hatti', correct: 'hattƒ±' },
    { wrong: 'bolge', correct: 'b√∂lge' }
  ];

  wrongChars.forEach(item => {
    const regex = new RegExp(`\\b${item.wrong}\\b`, 'i');
    if (regex.test(lowerText)) {
      problems.push(`T√ºrk√ße karakter eksik: "${item.wrong}" ‚Üí "${item.correct}"`);
    }
  });

  // √áok uzun ƒ∞ngilizce c√ºmle kontrol√º (5+ ƒ∞ngilizce kelime art arda)
  const englishSentencePattern = /\b(the|and|with|when|from|into|this|that|ball|player|make)\s+(the|and|with|when|from|into|this|that|ball|player|make)\s+(the|and|with|when|from|into|this|that|ball|player|make)/i;
  if (englishSentencePattern.test(text) && !isValidContext) {
    problems.push('Uzun ƒ∞ngilizce c√ºmle');
  }

  return [...new Set(problems)]; // Tekrarlarƒ± kaldƒ±r
}

function finishCheck() {
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('MUTLAK KAPSAMLI KONTROL TAMAMLANDI!');
  console.log('‚ïê'.repeat(100) + '\n');

  console.log(`üìä ƒ∞STATƒ∞STƒ∞KLER:`);
  console.log(`   Kontrol edilen alan sayƒ±sƒ±: ${checkedFields}`);
  console.log(`   Sorunlu kayƒ±t sayƒ±sƒ±: ${issues.length}`);
  console.log(`   Temiz kayƒ±t sayƒ±sƒ±: ${checkedFields - issues.length}`);
  console.log(`   Ba≈üarƒ± oranƒ±: ${((checkedFields - issues.length) / checkedFields * 100).toFixed(2)}%\n`);

  if (issues.length === 0) {
    console.log('‚úÖ‚úÖ‚úÖ T√úM VERƒ∞TABANI M√úKEMMEL! ‚úÖ‚úÖ‚úÖ');
    console.log('Hi√ßbir sorun bulunamadƒ±.\n');
  } else {
    console.log(`‚ùå ${issues.length} SORUNLU ALAN BULUNDU:\n`);

    // Tabloya g√∂re grupla
    const byTable = {};
    issues.forEach(issue => {
      if (!byTable[issue.table]) byTable[issue.table] = [];
      byTable[issue.table].push(issue);
    });

    console.log('TABLO BAZINDA SORUN DAƒûILIMI:\n');
    Object.keys(byTable).sort().forEach(table => {
      console.log(`üìã ${table}: ${byTable[table].length} sorunlu alan`);
    });

    console.log('\n\nDETAYLI SORUN Lƒ∞STESƒ∞:\n');
    Object.keys(byTable).sort().forEach(table => {
      const tableIssues = byTable[table];
      console.log(`\n${'‚ïê'.repeat(80)}`);
      console.log(`${table.toUpperCase()} - ${tableIssues.length} SORUNLU ALAN`);
      console.log('‚ïê'.repeat(80));

      tableIssues.slice(0, 20).forEach((issue, idx) => {
        console.log(`\n${idx + 1}. ID: ${issue.id}, Kolon: ${issue.column}`);
        console.log(`   Sorunlar: ${issue.problems.join(', ')}`);
        console.log(`   √ñrnek: "${issue.sample}..."`);
      });

      if (tableIssues.length > 20) {
        console.log(`\n   ... ve ${tableIssues.length - 20} sorun daha`);
      }
    });
  }

  console.log('\n' + '‚ïê'.repeat(100) + '\n');
  process.exit(0);
}
